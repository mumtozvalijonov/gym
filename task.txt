1) Создать class Gym: _address, _name, _employees, _customers
2) Создать class Person: _full_name, _age, _gender(использовать enum)
3) От Person наследовать два класса:
    - Customer: _remaining_visits, _total_visits
    - Employee: _position(enum {instructor, administrator, lawyer, accountant})
4) У Gym определить метод add_employee, который принимает объект класса employee и добавляет его в список 
    _employees
5) У Gym определить метод add_customer, который принимает объект класса Customer и добавляет его в список 
    _customers
6) У Gym определить метод export_employees_info, который принимает название файла csv и сохраняет туда
    список работников со всеми их деталями.
7) У Gym определить метод export_customers_info, который принимает название файла csv и сохраняет туда
    список клиентов со всеми их деталями.

8) У Customer определить метод add_visits, который принимает сумму денег amount, 
    добавляет количество посещений которое можно получить на эту сумму и возвращает сдачу.
    Сумма одного посещения 3.9$. Если суммы не хватает даже на одно посещение - выдает сообщение предупреждения.
9) У Customer определить метод visit_gym(), 
    который снижает _remaining_visits на 1 и увеличивает _total_visits на 1
    Если оставшихся посещений было 0, то raise Exception.


Тест:
1. Создать объект класса Gym
2. Добавить администратора
3. Добавить 2 инструкторов
4. Добавить юриста и бухгалтера
5. Экспортировать данные о работниках в staff.csv
6. Добавить клиента
7. Купить посещений на сумму 1$. Убедиться, что выдается сообщение предупреждения.
    Купить посещений на сумму 100$ и вывести в консоль сумму сдачи
8. Провести 3 посещения
9. Добавить клиента и купить посещений на 5$
10. Провести 2 посещения. Убедиться, что во 2 случае мы получаем сообщение ошибки
11. Экспортировать данные о клиентах в customers.csv

--------------------------------------------------------------------------------------------------------------------------------------------------------
								HOMEWORK
--------------------------------------------------------------------------------------------------------------------------------------------------------

10) Реализовать фичу: Добавлять по 1 бонусному посещению за каждые 5 посещений.
11) Реализовать фичу: Блокировка клиента - он не сможет посещать зал пока не будет разблокирован
12) Реализовать фичу: Разыграть 10 бесплатных посещений - право 10 посещений достается одному посетителю 
	случайным образом. Посетитель не должен быть заблокированным.
13) Создать class Discount(percents: float, visits: int)
14) У Gym создать метод add_discount, который принимает объект дисконта и сохраняет в self._discounts
15) При покупке посещений учитывать скидки. ВАЖНО: Не делать скидок по нескольким тарифам. Например, 
	Имея скидки: 
		-10% при покупке 10+ посещений
		-20% при покупке 50+ посещений
		-40% при покупке 100+ посещений
	Если клиент приобрел 55 посещений, то скидка должна быть [-20%] а не [-10%(за 10+ посещений) + -20%(за 50+ посещений)]
16) Добавить возможность в add_visits указывать желаемое количество визитов. Если оно указано, 
	то добавить это количество в _remaining_visits и возвращаем сдачу. В ином случае все как раньше.


Тест:
1. Добавить скидки:
	-10% при покупке 10+ посещений
	-20% при покупке 50+ посещений
	-40% при покупке 100+ посещений
2. Создать нового клиента и купить 55 посещений. Удостовериться в правильности работы скидки.
3. 5 раз посетить этим клиентом зал. Удостовериться, что получено бонусное посещение.
4. Заблокировать клиента. Удостовериться, что он не может посетить зал вызвав visit_gym()
5. Разблокировать его. Удостовериться, что он вновь может пользоваться услугами зала
6. Разыграть 10 посещений среди клиентов. Удостовериться, что победителю было добавлено 10 посещений.
